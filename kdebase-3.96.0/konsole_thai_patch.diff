diff -uNrp kdebase-kde4-4.0.0.orig/apps/konsole/src/Screen.cpp kdebase-kde4-4.0.0/apps/konsole/src/Screen.cpp
--- kdebase-kde4-4.0.0.orig/apps/konsole/src/Screen.cpp	2008-01-05 06:54:02.000000000 +0700
+++ kdebase-kde4-4.0.0/apps/konsole/src/Screen.cpp	2008-01-30 22:03:24.000000000 +0700
@@ -755,6 +755,42 @@ void Screen::ShowCharacter(unsigned shor
 
   int w = konsole_wcwidth(c);
 
+  // force combining character at column 0 to always take the first cell
+  if (w == 0 && cuX == 0 && QChar::category(c) == QChar::Mark_NonSpacing)
+    w = 1;
+
+  //Set CharSequence
+  const int MAX_COMBINING_CHARS = 5;
+  ushort u_char_combind[MAX_COMBINING_CHARS];
+
+  if (w == 0 && cuX > 0 && QChar::category(c) == QChar::Mark_NonSpacing) {
+    if (screenLines[cuY][cuX-1].rendition & RE_EXTENDED_CHAR)
+    {
+        // sequence of characters
+        ushort extendedCharLength = 0;
+        ushort* chars = ExtendedCharTable::instance
+                            .lookupExtendedChar(screenLines[cuY][cuX-1].charSequence,extendedCharLength);
+        if (extendedCharLength > 5)
+            return;
+        for ( int index = 0 ; index < extendedCharLength ; index++ )            
+            u_char_combind[index] = chars[index];
+
+        u_char_combind[extendedCharLength] = c;
+        Character& th_char = screenLines[cuY][cuX-1];
+        th_char.charSequence = ExtendedCharTable::instance.createExtendedChar(u_char_combind    ,extendedCharLength+1);
+    }
+    else
+    {
+        Character& th_char = screenLines[cuY][cuX-1];
+        
+        th_char.rendition |= RE_EXTENDED_CHAR;
+        u_char_combind[0] = (ushort)screenLines[cuY][cuX-1].character;
+        u_char_combind[1] = c;        
+        th_char.charSequence = ExtendedCharTable::instance.createExtendedChar(u_char_combind    ,2); 
+    }
+    return;            
+  }
+  
   if (w <= 0)
      return;
 
diff -uNrp kdebase-kde4-4.0.0.orig/apps/konsole/src/TerminalCharacterDecoder.cpp kdebase-kde4-4.0.0/apps/konsole/src/TerminalCharacterDecoder.cpp
--- kdebase-kde4-4.0.0.orig/apps/konsole/src/TerminalCharacterDecoder.cpp	2008-01-05 06:54:02.000000000 +0700
+++ kdebase-kde4-4.0.0/apps/konsole/src/TerminalCharacterDecoder.cpp	2008-01-30 22:03:24.000000000 +0700
@@ -80,10 +80,20 @@ void PlainTextDecoder::decodeLine(const 
         }
     }
 
-	for (int i=0;i<outputCount;i++)
-	{
-		plainText.append( QChar(characters[i].character) );
-	}
+       for (int i=0;i<outputCount;i++)
+       {
+           if (characters[i].rendition & RE_EXTENDED_CHAR) 
+           { 
+               ushort extendedCharLength = 0;
+               ushort* chars = ExtendedCharTable::instance 
+                               .lookupExtendedChar(characters[i].charSequence,extendedCharLength);
+
+               for (int j = 0;j<extendedCharLength;j++) 
+                  plainText.append(QChar(chars[j]));
+         
+           } else
+               plainText.append( QChar(characters[i].character) );
+       }
 
 	*_output << plainText;
 }
diff -uNrp kdebase-kde4-4.0.0.orig/apps/konsole/src/TerminalDisplay.cpp kdebase-kde4-4.0.0/apps/konsole/src/TerminalDisplay.cpp
--- kdebase-kde4-4.0.0.orig/apps/konsole/src/TerminalDisplay.cpp	2008-01-05 06:54:02.000000000 +0700
+++ kdebase-kde4-4.0.0/apps/konsole/src/TerminalDisplay.cpp	2008-01-30 22:05:01.000000000 +0700
@@ -1260,6 +1260,7 @@ void TerminalDisplay::drawContents(QPain
              _image[loc(x+len,y)].foregroundColor == currentForeground &&
              _image[loc(x+len,y)].backgroundColor == currentBackground &&
              _image[loc(x+len,y)].rendition == currentRendition &&
+             _image[loc(x+len,y)].rendition & ~RE_EXTENDED_CHAR &&  //No CharSequence
              (_image[ qMin(loc(x+len,y)+1,_imageSize) ].character == 0) == doubleWidth &&
              isLineChar( c = _image[loc(x+len,y)].character) == lineDraw) // Assignment!
       {
@@ -2340,19 +2341,41 @@ QVariant TerminalDisplay::inputMethodQue
                 return font();
             break;
         case Qt::ImCursorPosition:
+            {
+                Character *chars = &_image[loc(0,cursorPos.y())];
+                int tmp_count = 0;
+                for (int i = 0;i < cursorPos.x();i++)
+                {
+                    if (chars[i].rendition & RE_EXTENDED_CHAR)
+                    {
+                        ushort extendedCharLength = 0;
+                        ushort* chars_t = ExtendedCharTable::instance 
+                            .lookupExtendedChar(chars[i].charSequence,extendedCharLength);
+                        tmp_count += extendedCharLength-1;
+                    }
+                }
                 // return the cursor position within the current line
-                return cursorPos.x();
+                return cursorPos.x() + tmp_count;
+            }
             break;
         case Qt::ImSurroundingText:
-            {
+            {   
+                // Do not try to even peek screen buffer. The real text buffer
+                // owner is the process that runs on konsole, not konsole
+                // itself. Trying to do so would cause text input in remote
+                // sessions to depend on konsole's response, which can block
+                // one from typing continuously without waiting the characters
+                // to appear on screen, for instance.
+                return QString();
+
                 // return the text from the current line
-                QString lineText;
-                QTextStream stream(&lineText);
-                PlainTextDecoder decoder;
-                decoder.begin(&stream);
-                decoder.decodeLine(&_image[loc(0,cursorPos.y())],_usedColumns,_lineProperties[cursorPos.y()]);
-                decoder.end();
-                return lineText;
+//                 QString lineText;
+//                 QTextStream stream(&lineText);
+//                 PlainTextDecoder decoder;
+//                 decoder.begin(&stream);
+//                 decoder.decodeLine(&_image[loc(0,cursorPos.y())],_usedColumns,_lineProperties[cursorPos.y()]);
+//                 decoder.end();
+//                 return lineText;
             }
             break;
         case Qt::ImCurrentSelection:
