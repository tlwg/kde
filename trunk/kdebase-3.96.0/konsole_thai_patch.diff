diff -uNr kdebase-4.0.0.orig/apps/konsole/src/Screen.cpp kdebase-4.0.0/apps/konsole/src/Screen.cpp
--- kdebase-4.0.0.orig/apps/konsole/src/Screen.cpp	2008-01-19 18:19:52.000000000 +0700
+++ kdebase-4.0.0/apps/konsole/src/Screen.cpp	2008-01-19 18:28:02.000000000 +0700
@@ -755,6 +755,42 @@
 
   int w = konsole_wcwidth(c);
 
+  // force combining character at column 0 to always take the first cell
+  if (w == 0 && cuX == 0 && QChar::category(c) == QChar::Mark_NonSpacing)
+    w = 1;
+
+  //Set CharSequence
+  const int MAX_COMBINING_CHARS = 5;
+  ushort u_char_combind[MAX_COMBINING_CHARS];
+
+  if (w == 0 && cuX > 0 && QChar::category(c) == QChar::Mark_NonSpacing) {
+    if (screenLines[cuY][cuX-1].rendition & RE_EXTENDED_CHAR)
+    {
+        // sequence of characters
+        ushort extendedCharLength = 0;
+        ushort* chars = ExtendedCharTable::instance
+                            .lookupExtendedChar(screenLines[cuY][cuX-1].charSequence,extendedCharLength);
+        if (extendedCharLength > 5)
+            return;
+        for ( int index = 0 ; index < extendedCharLength ; index++ )            
+            u_char_combind[index] = chars[index];
+
+        u_char_combind[extendedCharLength] = c;
+        Character& th_char = screenLines[cuY][cuX-1];
+        th_char.charSequence = ExtendedCharTable::instance.createExtendedChar(u_char_combind    ,extendedCharLength+1);
+    }
+    else
+    {
+        Character& th_char = screenLines[cuY][cuX-1];
+        
+        th_char.rendition |= RE_EXTENDED_CHAR;
+        u_char_combind[0] = (ushort)screenLines[cuY][cuX-1].character;
+        u_char_combind[1] = c;        
+        th_char.charSequence = ExtendedCharTable::instance.createExtendedChar(u_char_combind    ,2); 
+    }
+    return;            
+  }
+  
   if (w <= 0)
      return;
 
diff -uNr kdebase-4.0.0.orig/apps/konsole/src/TerminalCharacterDecoder.cpp kdebase-4.0.0/apps/konsole/src/TerminalCharacterDecoder.cpp
--- kdebase-4.0.0.orig/apps/konsole/src/TerminalCharacterDecoder.cpp	2008-01-19 18:19:52.000000000 +0700
+++ kdebase-4.0.0/apps/konsole/src/TerminalCharacterDecoder.cpp	2008-01-19 18:20:55.000000000 +0700
@@ -80,10 +80,20 @@
         }
     }
 
-	for (int i=0;i<outputCount;i++)
-	{
-		plainText.append( QChar(characters[i].character) );
-	}
+    for (int i=0;i<outputCount;i++)
+    {
+        if (characters[i].rendition & RE_EXTENDED_CHAR) 
+        { 
+            ushort extendedCharLength = 0;
+            ushort* chars = ExtendedCharTable::instance 
+                            .lookupExtendedChar(characters[i].charSequence,extendedCharLength);
+
+            for (int j = 0;j<extendedCharLength;j++) 
+               plainText.append(QChar(chars[j]));
+         
+        } else
+            plainText.append( QChar(characters[i].character) );
+    }
 
 	*_output << plainText;
 }
diff -uNr kdebase-4.0.0.orig/apps/konsole/src/TerminalDisplay.cpp kdebase-4.0.0/apps/konsole/src/TerminalDisplay.cpp
--- kdebase-4.0.0.orig/apps/konsole/src/TerminalDisplay.cpp	2008-01-19 18:19:52.000000000 +0700
+++ kdebase-4.0.0/apps/konsole/src/TerminalDisplay.cpp	2008-01-19 18:20:55.000000000 +0700
@@ -648,10 +648,23 @@
     // draw text
     if ( isLineCharString(text) )
 	  	drawLineCharString(painter,rect.x(),rect.y(),text,style);
+    else if ( style->rendition & RE_EXTENDED_CHAR )     //draw CharSequence
+        drawCharSequence(painter,rect,text,style);
     else
         painter.drawText(rect,text);
 }
 
+void TerminalDisplay::drawCharSequence(   QPainter& painter,const QRect& rect, const QString& str, 
+                                    const Character* attributes)
+{ 
+    painter.drawText(rect,str[0]);
+    Qt::BGMode bgMode = painter.backgroundMode();
+    painter.setBackgroundMode(Qt::TransparentMode);
+    for (int i = 1; i < str.length(); i++)
+        painter.drawText(rect,str[i]);
+    painter.setBackgroundMode(bgMode);
+}
+
 void TerminalDisplay::drawTextFragment(QPainter& painter , 
                                        const QRect& rect,
                                        const QString& text, 
@@ -1260,6 +1273,7 @@
              _image[loc(x+len,y)].foregroundColor == currentForeground &&
              _image[loc(x+len,y)].backgroundColor == currentBackground &&
              _image[loc(x+len,y)].rendition == currentRendition &&
+             _image[loc(x+len,y)].rendition & ~RE_EXTENDED_CHAR &&  //No CharSequence
              (_image[ qMin(loc(x+len,y)+1,_imageSize) ].character == 0) == doubleWidth &&
              isLineChar( c = _image[loc(x+len,y)].character) == lineDraw) // Assignment!
       {
@@ -2340,19 +2354,41 @@
                 return font();
             break;
         case Qt::ImCursorPosition:
+            {
+                Character *chars = &_image[loc(0,cursorPos.y())];
+                int tmp_count = 0;
+                for (int i = 0;i < cursorPos.x();i++)
+                {
+                    if (chars[i].rendition & RE_EXTENDED_CHAR)
+                    {
+                        ushort extendedCharLength = 0;
+                        ushort* chars_t = ExtendedCharTable::instance 
+                            .lookupExtendedChar(chars[i].charSequence,extendedCharLength);
+                        tmp_count += extendedCharLength-1;
+                    }
+                }
                 // return the cursor position within the current line
-                return cursorPos.x();
+                return cursorPos.x() + tmp_count;
+            }
             break;
         case Qt::ImSurroundingText:
-            {
+            {   
+                // Do not try to even peek screen buffer. The real text buffer
+                // owner is the process that runs on konsole, not konsole
+                // itself. Trying to do so would cause text input in remote
+                // sessions to depend on konsole's response, which can block
+                // one from typing continuously without waiting the characters
+                // to appear on screen, for instance.
+                return QString();
+
                 // return the text from the current line
-                QString lineText;
-                QTextStream stream(&lineText);
-                PlainTextDecoder decoder;
-                decoder.begin(&stream);
-                decoder.decodeLine(&_image[loc(0,cursorPos.y())],_usedColumns,_lineProperties[cursorPos.y()]);
-                decoder.end();
-                return lineText;
+//                 QString lineText;
+//                 QTextStream stream(&lineText);
+//                 PlainTextDecoder decoder;
+//                 decoder.begin(&stream);
+//                 decoder.decodeLine(&_image[loc(0,cursorPos.y())],_usedColumns,_lineProperties[cursorPos.y()]);
+//                 decoder.end();
+//                 return lineText;
             }
             break;
         case Qt::ImCurrentSelection:
diff -uNr kdebase-4.0.0.orig/apps/konsole/src/TerminalDisplay.h kdebase-4.0.0/apps/konsole/src/TerminalDisplay.h
--- kdebase-4.0.0.orig/apps/konsole/src/TerminalDisplay.h	2008-01-19 18:19:52.000000000 +0700
+++ kdebase-4.0.0/apps/konsole/src/TerminalDisplay.h	2008-01-19 18:20:55.000000000 +0700
@@ -572,6 +572,10 @@
     // draws the characters or line graphics in a text fragment
     void drawCharacters(QPainter& painter, const QRect& rect,  const QString& text, 
                                            const Character* style, bool invertCharacterColor);
+    // draws the charSequence 
+    void drawCharSequence(QPainter& painter, const QRect& rect, 
+                          const QString& str, const Character* attributes);
+
     // draws a string of line graphics
 	void drawLineCharString(QPainter& painter, int x, int y, 
                             const QString& str, const Character* attributes);
