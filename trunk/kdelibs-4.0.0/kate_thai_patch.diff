diff -uNrp kdelibs-4.0.0.orig/kate/document/katedocument.cpp kdelibs-4.0.0/kate/document/katedocument.cpp
--- kdelibs-4.0.0.orig/kate/document/katedocument.cpp	2008-01-05 06:59:49.000000000 +0700
+++ kdelibs-4.0.0/kate/document/katedocument.cpp	2008-02-08 16:18:23.000000000 +0700
@@ -560,6 +560,16 @@ QString KateDocument::line( int line ) c
   return l->string();
 }
 
+bool KateDocument::getBreakLine(int line, int col)
+{
+  KateTextLine::Ptr l = m_buffer->plainLine(line);
+
+  if(!l)
+    return 0;
+  
+  return l->isBreakable(col);
+}
+
 bool KateDocument::setText(const QString &s)
 {
   if (!isReadWrite())
@@ -1189,25 +1199,21 @@ bool KateDocument::wrapText(int startLin
       // This could be a priority (setting) in the hl/filetype/document
       int z = 0;
       int nw = 0; // alternative position, a non word character
+      bool removeTrailingSpace = false;
+
       for (z=searchStart; z > 0; z--)
       {
-        if (t.at(z).isSpace()) break;
-        if ( ! nw && highlight()->canBreakAt( t.at(z) , l->attribute(z) ) )
-        nw = z;
+        if (t.at(z).isSpace()) {
+	  removeTrailingSpace = true; 
+	  z++;
+	  break;
+	}
+        if (l->isBreakable(z)) break;
+	if ( ! nw && highlight()->canBreakAt( t.at(z) , l->attribute(z) ) )
+          nw = z;
       }
 
-      bool removeTrailingSpace = false;
-      if (z > 0)
-      {
-        // So why don't we just remove the trailing space right away?
-        // Well, the (view's) cursor may be directly in front of that space
-        // (user typing text before the last word on the line), and if that
-        // happens, the cursor would be moved to the next line, which is not
-        // what we want (bug #106261)
-        z++;
-        removeTrailingSpace = true;
-      }
-      else
+      if (z == 0)
       {
         // There was no space to break at so break at a nonword character if
         // found, or at the wrapcolumn ( that needs be configurable )
diff -uNrp kdelibs-4.0.0.orig/kate/document/katedocument.h kdelibs-4.0.0/kate/document/katedocument.h
--- kdelibs-4.0.0.orig/kate/document/katedocument.h	2008-01-05 06:59:49.000000000 +0700
+++ kdelibs-4.0.0/kate/document/katedocument.h	2008-02-08 16:18:23.000000000 +0700
@@ -183,6 +183,7 @@ class KateDocument : public KTextEditor:
     virtual QString line(int line) const;
     virtual QChar character(const KTextEditor::Cursor& position) const;
     int lines() const;
+    bool getBreakLine(int line, int col);
     virtual KTextEditor::Cursor documentEnd() const;
     int numVisLines() const;
     int totalCharacters() const;
diff -uNrp kdelibs-4.0.0.orig/kate/document/katetextline.cpp kdelibs-4.0.0/kate/document/katetextline.cpp
--- kdelibs-4.0.0.orig/kate/document/katetextline.cpp	2008-01-05 06:59:49.000000000 +0700
+++ kdelibs-4.0.0/kate/document/katetextline.cpp	2008-02-08 16:21:05.000000000 +0700
@@ -28,6 +28,117 @@
 
 #include <QtCore/QRegExp>
 
+//Load Libthai
+#include <QtCore/QTextCodec>
+#include <klibloader.h>
+#ifndef HAVE_LIBTHAI
+typedef int (*th_brk_def)(const unsigned char*, int[], int);
+static th_brk_def th_brk;
+#else
+#include <thai/thailib.h>
+#include <thai/thbrk.h>
+#endif
+
+//Thai Break
+struct ThaiCache
+{
+    ThaiCache() {
+        string = 0;
+        allocated = 0x400;
+        wbrpos = (int *) malloc(allocated*sizeof(int));
+        numwbrpos = 0;
+        numisbreakable = 0x400;
+        isbreakable = (int *) malloc(numisbreakable*sizeof(int));
+        library = 0;
+    }
+    ~ThaiCache() {
+       free(wbrpos);
+       free(isbreakable);
+       if (library) library->unload();
+    }
+    const QChar *string;
+    int *wbrpos;
+    int *isbreakable;
+    int allocated;
+    int numwbrpos,numisbreakable;
+    KLibrary *library;
+};
+static ThaiCache *cache = 0;
+
+void cleanup_thaibreaks()
+{
+    delete cache;
+    cache = 0;
+#ifndef HAVE_LIBTHAI
+    th_brk = 0;
+#endif
+}
+
+int* isbreakWordThai( const QChar *string, const int pos, const int len)
+{
+    string = string + pos;
+    static QTextCodec *thaiCodec = QTextCodec::codecForMib(2259);
+
+#ifndef HAVE_LIBTHAI
+
+    KLibrary *lib = 0;
+
+    /* load libthai dynamically */
+    if (!th_brk && thaiCodec) {
+        printf("Try to load libthai dynamically...\n");
+        KLibLoader *loader = KLibLoader::self();
+        lib = loader->library(QLatin1String("libthai.so.0"));
+        if ( !lib )
+           lib = loader->library(QLatin1String("/usr/lib/libthai.so.0"));
+        if ( lib )
+           th_brk = (th_brk_def) lib->resolveFunction("th_brk");
+        if ( !th_brk ) {
+           // indication that loading failed and we shouldn't try to load again
+           printf("Error, can't load libthai...\n");
+           thaiCodec = 0;
+           if (lib)
+              lib->unload();
+         }
+    }
+
+    if (!th_brk ) {
+        return NULL;
+    }
+#endif
+
+    if (!cache ) {
+        cache = new ThaiCache;
+#ifndef HAVE_LIBTHAI
+        cache->library = lib;
+#endif
+    }
+    // build up string of thai chars
+    if ( string != cache->string ) {
+        //fprintf(stderr,"new string found (not in cache), calling libthai\n");
+        QByteArray cstr = thaiCodec->fromUnicode( QString::fromRawData(string,len));
+        //printf("About to call libthai::th_brk with str: %s",cstr.data());
+        cache->numwbrpos = th_brk((const unsigned char*) cstr.data(), cache->wbrpos, cache->allocated);
+        //fprintf(stderr,"libthai returns with value %d\n",cache->numwbrpos);
+        cache->isbreakable = (int *)realloc(cache->isbreakable, len*sizeof(int));
+	if (cache->numwbrpos >= cache->allocated) {
+            cache->allocated = len;
+            cache->wbrpos = (int *)realloc(cache->wbrpos, cache->allocated*sizeof(int));
+            cache->numwbrpos = th_brk((const unsigned char*) cstr.data(), cache->wbrpos, cache->allocated);
+        }
+        for (int i = 0 ; i < len ; ++i) {
+            cache->isbreakable[i] = 0;
+        }
+        if ( cache->numwbrpos > 0 ) {
+            for (int i = cache->numwbrpos-1; i >= 0; --i) {
+                cache->isbreakable[cache->wbrpos[i]] = 1;
+            }
+        }
+        cache->string = string;
+    }
+ 
+    return cache->isbreakable;
+}
+
 KateTextLine::KateTextLine ()
   : m_flags(0)
 {
@@ -39,7 +150,7 @@ KateTextLine::KateTextLine (const QChar 
 }
 
 KateTextLine::~KateTextLine()
-{
+{  cleanup_thaibreaks();
 }
 
 void KateTextLine::insertText (int pos, const QString& insText)
@@ -49,6 +160,36 @@ void KateTextLine::insertText (int pos, 
     return;
 
   m_text.insert (pos, insText);
+
+  m_breakLine.resize (m_text.size());
+  for (int i = pos; i < pos + insText.length(); i++) {
+    m_breakLine.insert (i, false);
+  }
+
+  int i = pos;
+  while (i != 0 && !m_text[i].isSpace()) {
+    --i;
+  }
+
+  while (i < pos + insText.length()) {
+    int th_len = 0;
+    while (m_text[i].unicode() < 0x0e00 && m_text[i].unicode() >= 0x0e80 && i < pos + insText.length())
+      i++;
+    while (m_text[i + th_len].unicode() >= 0x0e00 && m_text[i + th_len].unicode() < 0x0e80 && i + th_len < pos + insText.length())
+      th_len++;
+
+    if (th_len > 0) {
+      int* th_break = isbreakWordThai(m_text.constData(), i, th_len);
+      for (int j = i;j < i + th_len; j++)
+        m_breakLine[j] = th_break[j - i];
+    }
+    i += th_len + 1;
+  }
+}
+
+bool KateTextLine::isBreakable (int pos)
+{
+  return m_breakLine[pos];
 }
 
 void KateTextLine::removeText (uint pos, uint delLen)
@@ -69,6 +210,7 @@ void KateTextLine::removeText (uint pos,
     delLen = textLen - pos;
 
   m_text.remove (pos, delLen);
+  m_breakLine.remove (pos, delLen);
 }
 
 void KateTextLine::truncate(int newLen)
diff -uNrp kdelibs-4.0.0.orig/kate/document/katetextline.h kdelibs-4.0.0/kate/document/katetextline.h
--- kdelibs-4.0.0.orig/kate/document/katetextline.h	2008-01-05 06:59:49.000000000 +0700
+++ kdelibs-4.0.0/kate/document/katetextline.h	2008-02-08 16:18:23.000000000 +0700
@@ -285,6 +285,12 @@ class KateTextLine : public KShared
     void insertText (int pos, const QString& insText);
 
     /**
+     * return breakline attribute m_breakLine
+     * @param pos insert position
+     */    
+    bool isBreakable (int pos);
+
+    /**
      * remove text at given position
      * @param pos start position of remove
      * @param delLen length to remove
@@ -375,6 +381,11 @@ class KateTextLine : public KShared
      */
     QVector<int> m_attributesList;
 
+     /**
+     * Attribute for lineBreak value "true" for breakline
+     */
+    QVector<bool> m_breakLine;
+
     /**
      * context stack
      */
diff -uNrp kdelibs-4.0.0.orig/kate/render/katerenderer.cpp kdelibs-4.0.0/kate/render/katerenderer.cpp
--- kdelibs-4.0.0.orig/kate/render/katerenderer.cpp	2008-01-05 06:59:43.000000000 +0700
+++ kdelibs-4.0.0/kate/render/katerenderer.cpp	2008-02-08 16:18:23.000000000 +0700
@@ -755,7 +755,7 @@ void KateRenderer::layoutLine(KateLineLa
   QTextOption opt;
   opt.setFlags(QTextOption::IncludeTrailingSpaces);
   opt.setTabStop(m_tabWidth * config()->fontMetrics().width(spaceChar));
-  opt.setWrapMode(QTextOption::WrapAnywhere);//QTextOption::WrapAtWordBoundaryOrAnywhere);
+  opt.setWrapMode(QTextOption::WrapAtWordBoundaryOrAnywhere);//QTextOption::WrapAnywhere);
 
   // Find the first strong character in the string.
   // If it is an RTL character, set the base layout direction of the string to RTL.
diff -uNrp kdelibs-4.0.0.orig/kate/view/kateviewinternal.cpp kdelibs-4.0.0/kate/view/kateviewinternal.cpp
--- kdelibs-4.0.0.orig/kate/view/kateviewinternal.cpp	2008-01-05 06:59:49.000000000 +0700
+++ kdelibs-4.0.0/kate/view/kateviewinternal.cpp	2008-02-08 16:18:23.000000000 +0700
@@ -732,7 +732,11 @@ void KateViewInternal::doReturn()
 
 void KateViewInternal::doDelete()
 {
-  m_doc->del( m_view, m_cursor );
+  if ( m_view->config()->persistentSelection() || !m_view->selection() ) {
+    m_view->shiftCursorRight();
+  }
+  m_view->removeSelectedText();
+  return;
 }
 
 void KateViewInternal::doBackspace()
@@ -1024,8 +1028,11 @@ void KateViewInternal::wordLeft ( bool s
   }
   else if( h->isInWord( m_doc->line( c.line() )[ c.column() - 1 ] ) )
   {
-    while( !c.atEdge( left ) && h->isInWord( m_doc->line( c.line() )[ c.column() - 1 ] ) )
-      --c;
+    if (m_doc->getBreakLine(c.line(),c.column()))
+       --c;
+
+    while( !c.atEdge( left ) && h->isInWord( m_doc->line( c.line() )[ c.column() - 1 ] ) && !m_doc->getBreakLine(c.line(),c.column()))
+       --c;
   }
   else
   {
@@ -1062,7 +1069,9 @@ void KateViewInternal::wordRight( bool s
   }
   else if( h->isInWord( m_doc->line( c.line() )[ c.column() ] ) )
   {
-    while( !c.atEdge( right ) && h->isInWord( m_doc->line( c.line() )[ c.column() ] ) )
+    if (m_doc->getBreakLine(c.line(),c.column()))
+      ++c;
+    while( !c.atEdge( right ) && h->isInWord( m_doc->line( c.line() )[ c.column() ] ) && !m_doc->getBreakLine(c.line(),c.column()) )
       ++c;
   }
   else
@@ -3410,7 +3419,7 @@ QVariant KateViewInternal::inputMethodQu
       return renderer()->currentFont();
 
     case Qt::ImCursorPosition:
-      return cursorCoordinates(false);
+      return m_displayCursor.column();
 
     case Qt::ImSurroundingText:
       if (KateTextLine::Ptr l = textLine(m_cursor.line()))
