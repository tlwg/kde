diff -uNr kate-4.7.3.ori/part/document/katedocument.cpp kate-4.7.3/part/document/katedocument.cpp
--- kate-4.7.3.ori/part/document/katedocument.cpp	2011-08-22 20:24:15.000000000 +0700
+++ kate-4.7.3/part/document/katedocument.cpp	2012-01-04 17:30:57.000000000 +0700
@@ -950,15 +950,12 @@
       // This could be a priority (setting) in the hl/filetype/document
       int z = 0;
       int nw = 0; // alternative position, a non word character
-      for (z=searchStart; z > 0; z--)
-      {
-        if (t.at(z).isSpace()) break;
-        if ( ! nw && highlight()->canBreakAt( t.at(z) , l->attribute(z) ) )
-        nw = z;
-      }
+      QTextLayout curline( l->string() );
+      z = nw = curline.previousCursorPosition( searchStart, QTextLayout::SkipWords );
+
 
       bool removeTrailingSpace = false;
-      if (z > 0)
+      if (z == 0)
       {
         // So why don't we just remove the trailing space right away?
         // Well, the (view's) cursor may be directly in front of that space
diff -uNr kate-4.7.3.ori/part/view/kateview.cpp kate-4.7.3/part/view/kateview.cpp
--- kate-4.7.3.ori/part/view/kateview.cpp	2011-08-22 20:24:15.000000000 +0700
+++ kate-4.7.3/part/view/kateview.cpp	2012-01-04 17:30:57.000000000 +0700
@@ -1909,18 +1909,25 @@
 
 void KateView::selectWord( const KTextEditor::Cursor& cursor )
 {
-  int start, end, len;
+  int start, end;
+  const QString wordSep = (".,?!:;-<>[](){}=/\t");
+  QChar ch;
 
-  Kate::TextLine textLine = m_doc->plainKateTextLine(cursor.line());
+  KateLineLayoutPtr curLine = m_viewInternal->cache()->line( cursor.line() );
 
-  if (!textLine)
-    return;
+  start = cursor.column();
 
-  len = textLine->length();
-  start = end = cursor.column();
-  while (start > 0 && m_doc->highlight()->isInWord(textLine->at(start - 1), textLine->attribute(start - 1))) start--;
-  while (end < len && m_doc->highlight()->isInWord(textLine->at(end), textLine->attribute(start - 1))) end++;
-  if (end <= start) return;
+  ch = curLine->layout()->text()[start - 1];
+  start -= wordSep.contains(ch) ? 1 : 0;
+  ch = curLine->layout()->text()[start - 1];
+  start += (ch == QLatin1Char(' ')) ? 1 : 0;
+
+  start = curLine->layout()->previousCursorPosition( start, QTextLayout::SkipWords);
+  end = curLine->layout()->nextCursorPosition( start, QTextLayout::SkipWords );
+
+  ch = curLine->layout()->text()[end - 1];
+  if ( wordSep.contains(ch) || ch == QLatin1Char(' ') )
+    --end;
 
   setSelection (KTextEditor::Range(cursor.line(), start, cursor.line(), end));
 }
diff -uNr kate-4.7.3.ori/part/view/kateviewinternal.cpp kate-4.7.3/part/view/kateviewinternal.cpp
--- kate-4.7.3.ori/part/view/kateviewinternal.cpp	2011-10-02 19:49:07.000000000 +0700
+++ kate-4.7.3/part/view/kateviewinternal.cpp	2012-01-04 17:30:57.000000000 +0700
@@ -790,6 +790,9 @@
 
 void KateViewInternal::doDelete()
 {
+  // If no selection then select one cell for delete cell instead of char
+	if ( !m_view->config()->persistentSelection() && !m_view->selection() )
+		cursorRight( true );
   doc()->del( m_view, m_cursor );
 }
 
@@ -964,6 +967,70 @@
   virtual CalculatingCursor& operator-=( int n ) {
     return operator+=( -n );
   }
+  virtual CalculatingCursor& previousWordPosition () {
+    KateLineLayoutPtr thisLine = m_vi->cache()->line(line());
+    if (!thisLine->isValid()) {
+      kWarning() << "Did not retrieve a valid layout for line " << line();
+      return *this;
+    }
+
+    if (m_column == 0) {
+      // Have come to the start of the document
+      if (line() != 0) {
+
+        // Start going back to the end of the last line
+        setLine(line() - 1);
+
+        // Retrieve the next text range
+        thisLine = m_vi->cache()->line(line());
+        if (!thisLine->isValid()) {
+          kWarning() << "Did not retrieve a valid layout for line " << line();
+          return *this;
+        }
+
+        // Finish going back to the end of the last line
+        m_column = thisLine->length();
+
+      }
+    }
+
+    m_column = thisLine->layout()->previousCursorPosition(m_column, QTextLayout::SkipWords);
+
+    Q_ASSERT(valid());
+    return *this;
+  }
+
+  virtual CalculatingCursor& nextWordPosition () {
+    KateLineLayoutPtr thisLine = m_vi->cache()->line(line());
+    if (!thisLine->isValid()) {
+      kWarning() << "Did not retrieve a valid layout for line " << line();
+      return *this;
+    }
+
+    if (m_column == thisLine->length()) {
+      // Have come to the end of a line
+      if (line() < m_vi->doc()->lines() - 1) {
+        // Not end of the document
+
+        // Advance to the beginning of the next line
+        m_column = 0;
+        setLine(line() + 1);
+
+        // Retrieve the next text range
+        thisLine = m_vi->cache()->line(line());
+        if (!thisLine->isValid()) {
+          kWarning() << "Did not retrieve a valid layout for line " << line();
+          return *this;
+        }
+
+      }
+    }
+
+    m_column = thisLine->layout()->nextCursorPosition(m_column, QTextLayout::SkipWords);
+
+    Q_ASSERT(valid());
+    return *this;
+  }
 };
 
 class WrappingCursor : public CalculatingCursor {
@@ -1070,7 +1137,7 @@
 
 void KateViewInternal::wordLeft ( bool sel )
 {
-  WrappingCursor c( this, m_cursor );
+  BoundedCursor c( this, m_cursor );
 
   // First we skip backwards all space.
   // Then we look up into which category the current position falls:
@@ -1080,32 +1147,8 @@
   // and skip all preceding characters that fall into this class.
   // The code assumes that space is never part of the word character class.
 
-  KateHighlighting* h = doc()->highlight();
-  if( !c.atEdge( left ) ) {
-
-    while( !c.atEdge( left ) && doc()->line( c.line() )[ c.column() - 1 ].isSpace() )
-      --c;
-  }
-  if( c.atEdge( left ) )
-  {
-    --c;
-  }
-  else if( h->isInWord( doc()->line( c.line() )[ c.column() - 1 ] ) )
-  {
-    while( !c.atEdge( left ) && h->isInWord( doc()->line( c.line() )[ c.column() - 1 ] ) )
-      --c;
-  }
-  else
-  {
-    while( !c.atEdge( left )
-           && !h->isInWord( doc()->line( c.line() )[ c.column() - 1 ] )
-           // in order to stay symmetric to wordLeft()
-           // we must not skip space preceding a non-word sequence
-           && !doc()->line( c.line() )[ c.column() - 1 ].isSpace() )
-    {
-      --c;
-    }
-  }
+  // Using skipWords mode of QTextLayout
+  c.previousWordPosition ();;
 
   updateSelection( c, sel );
   updateCursor( c );
@@ -1113,7 +1156,7 @@
 
 void KateViewInternal::wordRight( bool sel )
 {
-  WrappingCursor c( this, m_cursor );
+  BoundedCursor c( this, m_cursor );
 
   // We look up into which category the current position falls:
   // 1. a "word" character
@@ -1123,30 +1166,8 @@
   // If the skipped characters are followed by space, we skip that too.
   // The code assumes that space is never part of the word character class.
 
-  KateHighlighting* h = doc()->highlight();
-  if( c.atEdge( right ) )
-  {
-    ++c;
-  }
-  else if( h->isInWord( doc()->line( c.line() )[ c.column() ] ) )
-  {
-    while( !c.atEdge( right ) && h->isInWord( doc()->line( c.line() )[ c.column() ] ) )
-      ++c;
-  }
-  else
-  {
-    while( !c.atEdge( right )
-           && !h->isInWord( doc()->line( c.line() )[ c.column() ] )
-           // we must not skip space, because if that space is followed
-           // by more non-word characters, we would skip them, too
-           && !doc()->line( c.line() )[ c.column() ].isSpace() )
-    {
-      ++c;
-    }
-  }
-
-  while( !c.atEdge( right ) && doc()->line( c.line() )[ c.column() ].isSpace() )
-    ++c;
+  // Using skipWords mode of QTextLayout
+  c.nextWordPosition ();
 
   updateSelection( c, sel );
   updateCursor( c );
